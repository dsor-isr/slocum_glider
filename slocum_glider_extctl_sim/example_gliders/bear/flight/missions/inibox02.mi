# missions/inibox02.mi
#
# This is a test mission. Flys the glider in a box (N->E->S->W), 30m per side.


sensor: u_use_current_correction(nodim)   0.0  # Do not use current correction

behavior: abend
                                               # MS_ABORT_OVERDEPTH
    b_arg: overdepth(m)                   -1.0 # <0 disables,
                                               # clipped to F_MAX_WORKING_DEPTH

                                               # MS_ABORT_OVERTIME
    b_arg: overtime(sec)                1200.0 # < 0 disables

                                               # MS_ABORT_SAMEDEPTH
    b_arg: samedepth_for(sec)             1000.0 # <0 disables
    b_arg: samedepth_for_sample_time(sec) 1000.0 # how often to check


# When mission is done, i.e. yo completes
behavior: surface
    b_arg: start_when(enum)    1  # stk idle
    b_arg: end_action(enum)   0   # 0-quit, 1 wait for ^C quit/resume, 2 resume, 3 drift til "end_wpt_dist"
    b_arg: gps_wait_time(sec) 300   # how long to wait for gps

behavior: goto_list
    b_arg: start_when(enum) 0         # Immediately
    b_arg: num_waypoints(nodim) 4
    b_arg: num_legs_to_run(nodim) -2  # Traverse list once
    b_arg: initial_wpt(enum) 0
    b_arg: list_stop_when(enum) 7     # Dist to waypoint
    b_arg: list_when_wpt_dist(m) 10   # is 10m or less
    b_arg: end_action(enum) 0         # quit
    b_arg: wpt_units_0(enum) 0        # LMC
    b_arg: wpt_x_0(X) 0
    b_arg: wpt_y_0(X) 30
    b_arg: wpt_units_1(enum) 0        # LMC
    b_arg: wpt_x_1(X) 30
    b_arg: wpt_y_1(X) 30
    b_arg: wpt_units_2(enum) 0        # LMC
    b_arg: wpt_x_2(X) 30
    b_arg: wpt_y_2(X) 0
    b_arg: wpt_units_3(enum) 0        # LMC
    b_arg: wpt_x_3(X) 0
    b_arg: wpt_y_3(X) 0

behavior: yo
    b_arg: start_when(enum)      4   # updwn_idle
    b_arg: num_half_cycles_to_do(nodim) -1   # Number of dive/climbs to perform
                                     # <0 is infinite, i.e. never finishes

    # arguments for dive_to
    b_arg: d_target_depth(m)      10
    b_arg: d_target_altitude(m)  -1

    b_arg: d_use_pitch(enum)      2
    b_arg: d_pitch_value(X)       -0.4538

    b_arg: d_max_thermal_charge_time(s)  30.0
    b_arg: d_stop_when_stalled_for(sec) 600.0

    # arguments for climb_to
    b_arg: c_target_depth(m)      3
    b_arg: c_target_altitude(m)  -1

    b_arg: c_use_pitch(enum)      2
    b_arg: c_pitch_value(X)      0.4538
    b_arg: c_stop_when_stalled_for(sec) 600.0

    b_arg: end_action(enum) 0     # 0-quit, 2 resume


   # Sample all science sensors only on downcast and upcast
behavior: sample
    b_arg: state_to_sample(enum)   5  # diving|climbing

    b_arg: intersample_time(s)     4  # if < 0 then off, if = 0 then
                                      # fast as possible

behavior: prepare_to_dive
    b_arg: start_when(enum) 0      # See doco above
    b_arg: wait_time(sec)    300   # how long to wait for gps
    b_arg: max_thermal_charge_time(sec)  10  # The maximum length of time to wait for
                                             # charge from thermal tubes.  After this time the
                                             # electric charge pump is used.

    # Everything but science is on
behavior: sensors_in
    # <0 off, 0 as fast as possible, N, sample every N secs
    b_arg: c_att_time(sec)        0.0
    b_arg: c_pressure_time(sec)   0.0
    b_arg: c_alt_time(sec)        0.0
    b_arg: u_battery_time(sec)    0.0
    b_arg: u_vacuum_time(sec)     0.0
    b_arg: c_leakdetect_time(sec) 0.0
    b_arg: c_gps_on(bool)         0.0  # Special, 1 is on, 0 is off

    # Turn the pinger on
behavior: pinger_on
