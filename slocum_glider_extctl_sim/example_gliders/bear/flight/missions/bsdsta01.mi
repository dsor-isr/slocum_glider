# bsdsta01.mi
#
# Tell the Backseat Driver to perform a status check. Exits with error if the
# BSD has a problem.

# Tell the backseat driver we're running a status mission.
sensor: u_mission_param_l(X) 2

behavior: abend
    b_arg: overdepth(m)                   10.0 # <0 disables,
    b_arg: overdepth_sample_time(s)       10.0 # how often to check
    b_arg: overtime(s)                   360.0 # < 0 disables


behavior: surface
    b_arg: start_when(enum) 15    # sci_mission_mode
    b_arg: when_secs(sec)   1     # 1s bit
    b_arg: end_action(enum) 0     # 0-quit, 1 wait for ^C quit/resume, 2 resume
    b_arg: report_all(bool) 1     # T->report all sensors once, F->just gps
    b_arg: gps_wait_time(s)   180     # how long to wait for gps and/or ^C
    b_arg: sensor_input_wait_time(sec) 60  # how long to wait for input sensors 

behavior: sample
    b_arg: state_to_sample(enum) 15 # all states
    b_arg: intersample_time(s)   0

    # Turn all sensors off
behavior: sensors_in

behavior: nop_cmds
    b_arg: nop_pitch(bool)   1   # t-> cmd pitch   to _IGNORE to keep stack busy
    b_arg: nop_bpump(bool)   1   # t-> cmd bpump   to _IGNORE to keep stack busy
    b_arg: nop_heading(bool) 1   # t-> cmd heading to _IGNORE to keep stack busy
    b_arg: nop_threng(bool)  1   # t-> cmd threng  to _IGNORE to keep stack busy

    # Turn the pinger on
behavior: pinger_on
